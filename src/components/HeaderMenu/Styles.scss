@import '../../main.scss';

$menu-items: 5;

// Transition Speed
$transition-speed: 0.35s;

// Dynamic Variables
$width: (100/$menu-items) * 1%; // makes each item the right size
$menu-items-loop-offset: $menu-items - 1; // the number of items in the menu


// ======================================================
// Step 1 - Making a Fixed Width Navigation
// ======================================================

nav {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 85%;
  height: 100px;
  margin: 0 auto;
  z-index: 1;
}

ul {
  @extend %cf; // clear the floats
  display: flex;
  justify-content: center;
  align-items: center;
  width: 95%;
  border-radius: 100px;
  height: 50%;
  box-shadow: 0px 1px 2.5px 0px rgba(0,0,0,0.1);

}

.Nav-item {
  display: block;
  float: left;
  margin: 0;
  padding: 0;
  width: $width; //dynamic width
  text-align: center;
  border-radius: 100px;
  margin: 0 10px;

  &.is-active a {
    color: $white;
    background-color: $dark;
    border-radius: 100px;
  }

  a {
    color: $black;
    display: block;
    padding: 10px 0;
    text-decoration: none;
    font-weight: 600;
    &:hover {
      color: $primary;
    }
  }
}


// ======================================================
// Step 2 - Making the pseudo indicator
// ======================================================

.with-indicator {
  position: relative;// the menu is "relative" to the absolute position last-child pseudo elements.
  z-index: 0;

  .Nav-item {
    // ======================================================
    // Step 2.1 - Making the indicator with the pseudo element.
    // ======================================================
    &:last-child {
      &:before, &:after {
        content: '';
        display: block;
        position: absolute;
        pointer-events: none;
        transition: left #{$transition-speed} ease;
      }
      &:before {
        border: 1px solid transparent;
        border-radius: 100px;
        border-top-color: $gray;
        width: 0;
        height: 0;
        top: 0;
        left: ($width/2);
        margin-left: -30px;
      }
      &:after {
        background: $gray;
        border-radius: 100px;
        top: -6px;
        bottom: -6px;
        left: 0;
        width: $width;
        z-index: -1;
      }
    }
  }

@for $i from 1 through $menu-items-loop-offset {
  // when the Nav item "is active", make the indicator line up with the navigation item.
  .Nav-item:nth-child(#{$i}).is-active ~ .Nav-item:last-child:after {
    left:($width*$i)-$width;
  }
  .Nav-item:nth-child(#{$i}).is-active ~ .Nav-item:last-child:before
  {
    left:($width*$i)+($width/2)-$width; // this ensures the triangle lines up to the menu.
  }
}

// ======================================================
// Step 3 - Making it move
// ======================================================

  // This could be in the same loop as the above but for the tutorial steps it's not
  @for $i from 1 through $menu-items-loop-offset {
  // We have to use !important to make the hovers overide if the last:child is the active or hovered
  
  .Nav-item:nth-child(#{$i}):hover ~ .Nav-item:last-child:after {
    left:($width*$i)-$width !important;
  }

  .Nav-item:nth-child(#{$i}):hover ~ .Nav-item:last-child:before{
    left:($width*$i)+($width/3)-$width !important;
  }
    
}
  
  // this could be nested in the original .Nav-item
  .Nav-item {
    &:last-child {
      // make sure the last-child talks to itself
      &:hover, 
      &.is-active {
        color: blue;
        &:before {
          // we have to use important because the sibling selector is more specific.
          left: (100%-$width)+($width/2) !important;
        }
        &:after{
          left: 100%-$width !important;
        }
      }        
    }
  }
}

%cf:before,
%cf:after {
  content: " ";
  display: table;
}
%cf:after {
  clear: both;
}